<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Such geek. Wow.</title><link href="https://www.ericlight.com/" rel="alternate"></link><link href="https://www.ericlight.com/feeds/tech.atom.xml" rel="self"></link><id>https://www.ericlight.com/</id><updated>2016-10-27T22:28:02+13:00</updated><entry><title>Broken log times in APC's PCNS Appliance 4.1</title><link href="https://www.ericlight.com/articles/broken-log-times-in-apcs-pcns-appliance-41.html" rel="alternate"></link><published>2016-10-27T22:28:02+13:00</published><updated>2016-10-27T22:28:02+13:00</updated><author><name>Eric Light</name></author><id>tag:www.ericlight.com,2016-10-27:articles/broken-log-times-in-apcs-pcns-appliance-41.html</id><summary type="html">&lt;p&gt;Schneider Electric's &lt;a href="http://www.schneider-electric.com/en/product-range/61933-powerchute-network-shutdown/"&gt;PowerChute Network Shutdown&lt;/a&gt; is a piece of software which communicates with your local UPS, and initiates system shutdown if the UPS battery is unable to continue providing power.  This helps to preserve file integrity in the event of a prolonged power failure.&lt;/p&gt;
&lt;p&gt;Previously, you had to install the PCNS client separately on each virtual machine.  Since then though, APC have released a &lt;a href="https://solutionexchange.vmware.com/store/products/apc-powerchute-network-shutdown-v4-1-for-vmware"&gt;PCNS VMware Appliance&lt;/a&gt; which is installed directly into vCenter, and initiates shutdown on all the VMware guests through a single Virtual Machine.  This is a much tidier model, so we've recently embarked on migrating to the PCNS Appliance.&lt;/p&gt;
&lt;p&gt;After installing the PCNS 4.1 appliance and getting everything working, I discovered that the time on all the log files was wrong by a significant margin.  I can't remember exactly what the margin was, it could have been say 8 hours or something.&lt;/p&gt;
&lt;p&gt;I did a bit of research and eventually I discovered a spectaularly old question on the APC forums, dating all the way back to 2011:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;"I have installed PCNS 2.2.4 into the vMA of an ESXi 4.1 server. It properly communicates with the associated NMC and performs correctly. However, it reports all the activities in Eastern Standard Time. I don't know where it's picking up that time zone and can't find anywhere to change it. In the vSphere client the time shows up correctly. Checking date inside the vMA from the CLI also shows the correct time and timezone. The date and time setting in the NMC is correct and is set to synch with NTP with correct time zone."&lt;/em&gt;&lt;br /&gt;
From: &lt;a href="http://forums.apc.com/spaces/7/ups-management-devices-powerchute-software/forums/general/6809/pcns-2-2-4-esxi-annoyance"&gt;http://forums.apc.com/spaces/7/ups-management-devices-powerchute-software/forums/general/6809/pcns-2-2-4-esxi-annoyance&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The answers include a broken link to an APC web page about it, but fortunately the poster copied the original post detail, which showed me where to look:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;"PCNS uses a standard java function to retrieve the current date from the system when writing events to the log. The Problem on the VIMA is that this function always returns the US date format (PDT).&lt;br /&gt;
This is an issue with Java http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6456628&lt;br /&gt;
You can correct the time issue on VIMA by modifying /etc/sysconfig/clock file.&lt;br /&gt;
+/etc/sysconfig/clock contains a line ZONE="America/Los_Angeles"+&lt;br /&gt;
You need to edit the ZONE= to match your region such as ZONE="America/New_York"&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Sounds great!  But when I looked in /etc/sysconfig/clock, I discovered my time zone was already set to "Pacific/Auckland".&lt;/p&gt;
&lt;p&gt;However, it also contained the value "UTC = False".  I changed this to "UTC = True", and et voil√†!  The problem is fixed!&lt;/p&gt;</summary><category term="UPS"></category></entry><entry><title>Using ECDSA certificates with Let's Encrypt</title><link href="https://www.ericlight.com/articles/using-ecdsa-certificates-with-lets-encrypt.html" rel="alternate"></link><published>2016-10-27T01:35:27+13:00</published><updated>2016-10-27T01:35:27+13:00</updated><author><name>Eric Light</name></author><id>tag:www.ericlight.com,2016-10-27:articles/using-ecdsa-certificates-with-lets-encrypt.html</id><summary type="html">&lt;p&gt;&lt;a href="https://www.letsencrypt.org"&gt;Let's Encrypt&lt;/a&gt;'s Certbot will generate an RSA key by default.  But we want to step into the new and exciting world of elliptic curve cryptography! Unfortunately Certbot doesn't really roll that way, so there are a couple hoops to jump through first.&lt;/p&gt;
&lt;p&gt;A word of caution: this post has been written in retrospect, some time after I actually got ECDSA working.  That means there are bound to be squiggly little steps that I've missed, and I certainly should have provided screenshots or snippets that I've missed.  Sorry.&lt;/p&gt;
&lt;p&gt;This post assumes you've already installed Certbot.  I had a working regular certificate from Certbot before I changed to ECDSA, so if you have problems following this from scratch, I do recommend trying that first.&lt;/p&gt;
&lt;p&gt;For future reference, I'm running the latest certbot available in Debian unstable, which is version 0.8.1-3.&lt;/p&gt;
&lt;p&gt;I got most of this information from &lt;a href="https://scotthelme.co.uk/tag/lets-encrypt/"&gt;Scott Helme's website&lt;/a&gt;, which has been awesome.&lt;/p&gt;
&lt;p&gt;In brief:&lt;/p&gt;
&lt;p&gt;1)  Generate yourself an ECDSA private key:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;openssl ecparam -genkey -name secp384r1 | openssl ec -out ec.key
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You can change the curve that you use, if you feel a bit wiggly about the &lt;a href="http://blog.cr.yp.to/20140323-ecdsa.html"&gt;controversy around the NSA &amp;amp; NIST&lt;/a&gt; degrading the quality of the curves.  I don't feel particularly wiggly about that, myself.&lt;/p&gt;
&lt;p&gt;2)  Generate a Certificate Signing Request (CSR) with your shiny new key:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;openssl req -new -sha256 -key ec.key -nodes -out ec.csr -outform pem
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;That will give you ec.key (your private key), and ec.csr (your certificate signing request).  Time to get Let's Encrypt involved.&lt;/p&gt;
&lt;p&gt;3)  Create your certificate:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;certbot certonly -w /var/www/html/ -d {your_domain} --email &amp;quot;{your_email}&amp;quot; --csr ./ec.csr --agree-tos
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If everything goes perfectly, that should leave you with a new shiny set of certificates -- quite possibly named something clumsy like 0000-cert.pem and 0001-fullchain.pem, or similar.  Throw those into your nginx config and give it a test to see if it's working.&lt;/p&gt;
&lt;p&gt;4)  Schedule your certificate renewals:&lt;/p&gt;
&lt;p&gt;I had particular trouble with the renewal process of ECDSA certificates, because &lt;code&gt;certbot renew&lt;/code&gt; isn't compatible with custom CSR's.  You need to run &lt;code&gt;certbot certonly&lt;/code&gt; to pass the --csr argument, and then you need to deal with the output yourself.&lt;/p&gt;
&lt;p&gt;Even more irksome, the certonly function will fail if you ask it to renew certificates which already exist:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;An unexpected error occurred:
OSError: [Errno 17] File exists: &amp;#39;/etc/letsencrypt/live/{your_domain}/cert_ecdsa.pem&amp;#39;
Please see the logfiles in /var/log/letsencrypt for more details.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;There doesn't seem to be any way to tell certbot to overwrite the old certificates automatically, so I created a /etc/letsencrypt/temp folder, and wrote up a really yuck cron job for it.  If I were working on a production system I'd do something better, but this works for my lowly domain:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# Recreate certs under /etc/letsencrypt/temp
30 2 24 * * certbot certonly -w /var/www/html/ -d {your_domain} --email &amp;quot;{your_email}&amp;quot; --csr /path/to/your/ec.csr --agree-tos --non-interactive --webroot --cert-path /etc/letsencrypt/temp/cert_ecdsa.pem --fullchain-path /etc/letsencrypt/temp/fullchain_ecdsa.pem

# Backup current certs to home dir
31 2 24 * * mv /etc/letsencrypt/live/{your_domain}/cert_ecdsa.pem ~/certbackup/
31 2 24 * * mv /etc/letsencrypt/live/{your_domain}/fullchain_ecdsa.pem ~/certbackup/

# Move new certs to live folder
32 2 24 * * mv /etc/letsencrypt/temp/* /etc/letsencrypt/live/{your_domain}/

# Restart nginx
33 2 24 * * service nginx restart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;And that's all!  It seems to be working so far, but I'm sure something is going to fail at some point -- maybe I'll hit my request limit, or the Let's Encrypt service will be down, and I'll lose my certs.  If it happens too often I'll come up with a nicer cronjob and update this post.&lt;/p&gt;</summary><category term="Security"></category></entry><entry><title>Updating the modem and radio firmware on a Samsung Galaxy 5 (G900I)</title><link href="https://www.ericlight.com/articles/updating-the-modem-and-radio-firmware-on-a-samsung-galaxy-5-g900i.html" rel="alternate"></link><published>2016-10-27T01:23:54+13:00</published><updated>2016-10-27T01:23:54+13:00</updated><author><name>Eric Light</name></author><id>tag:www.ericlight.com,2016-10-27:articles/updating-the-modem-and-radio-firmware-on-a-samsung-galaxy-5-g900i.html</id><summary type="html">&lt;p&gt;A couple months ago, &lt;a href="http://www.checkpoint.com"&gt;Check Point&lt;/a&gt; revealed their discovery of the &lt;a href="http://blog.checkpoint.com/2016/08/07/quadrooter/"&gt;Quadrooter vulnerability&lt;/a&gt; affecting the Qualcomm chipsets in oodles of Android phones.&lt;/p&gt;
&lt;p&gt;I use &lt;a href="http://www.cyanogenmod.org"&gt;CyanogenMod&lt;/a&gt; on a Samsung Galaxy S5, so thankfully I &lt;a href="http://www.cyanogenmod.org/blog/cm-13-0-release-znh5y"&gt;received patches&lt;/a&gt; for three of the four vulnerabilities in only a few days.&lt;/p&gt;
&lt;p&gt;However, that last vulnerability was part of a proprietary binary blob for controlling the Qualcomm LTE chipset, only patchable by Samsung themselves.  It took a while for the Samsung updates to roll out, and then I got distracted for a while, but I finally downloaded my firmware.  The package I've used is "G900IDVU1CPH3", which seems to be compatible at least with the three NZ-based carriers, as well as all the Australian carriers.&lt;/p&gt;
&lt;p&gt;There are a couple little issues with the firmware upgrade, easily fixed if you know how.  I'm going to assume you know exactly how to do everything without help.  I'm sure you're pleased.&lt;/p&gt;
&lt;p&gt;In particular, the version of Heimdall in the Debian Sid repositories (1.4.1-2) doesn't quite work with the SGS5.  It appears &lt;a href="https://www.google.com/search?q=ERROR%3A+Failed+to+send+request+to+end+PIT+file+transfer%21+samsung"&gt;other people&lt;/a&gt; have had similar problems.&lt;/p&gt;
&lt;p&gt;The beginning of fix for me came from &lt;a href="https://github.com/turboyz"&gt;turboyz&lt;/a&gt; on Github, at the bottom of this post:  &lt;a href="https://github.com/Benjamin-Dobell/Heimdall/issues/348"&gt;https://github.com/Benjamin-Dobell/Heimdall/issues/348&lt;/a&gt;; however, he's manually made a couple changes to BridgeManager.cpp, which appear to be no longer necessary.  We can simply build it from source:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install build-essential cmake zlib1g-dev libusb-1.0-0-dev git
git clone https://github.com/Benjamin-Dobell/Heimdall.git
cd Heimdall

# OPTIONAL:  Remove the `if(NOT DISABLE_FRONTEND)` codeblock at the end of Heimdall/CMakeLists.txt
# I believe this just saves time compiling the GUI

mkdir build &amp;amp;&amp;amp; cd build
cmake -DCMAKE_BUILD_TYPE=Release ..
make
cd bin
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Now you've got a nice new Heimdall installation, with the approproate updates to allow it to talk nicely to the new Samsung bootloader.&lt;/p&gt;
&lt;p&gt;I copied my new baseband files into the Heimdall/build/bin folder, just to get them all together.  The last step is to flash your NON-HLOS.bin and modem.bin files:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;./heimdall flash --APNHLOS NON-HLOS.bin --MODEM modem.bin
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I happen to have an issue on my phone currently where, even though the modem and LTE drivers have both been successfully installed, and even thought the Quadrooter tester is no longer showing any vulnerabilities, my Baseband version on my phone is still shown as the old one.  I haven't been able to figure out why yet, but I don't think I'll worry about it for now.  There have been reports that you should first do this with --no-reboot, wait for the update to complete, then pull your battery, then when you power back on, immediately go &lt;em&gt;back&lt;/em&gt; into download mode and re-flash.  Apparently this helps update the recognised Baseband version, but to be honest it didn't help me.&lt;/p&gt;
&lt;p&gt;If you're completely 100% lucky and absolutely nothing goes wrong, you win!  You should now have the most recent Samsung modem and LTE chipset drivers available for your phone... without having to roll back to the stock Samsung firmware.&lt;/p&gt;
&lt;p&gt;Incidentally, if you want to save gigabytes and time downloading said firmware, and if your phone is precisely a Samsung Galaxy S5 (G900I), and if you definitely want firmware G900IDVU1CPH3, I've extracted the important files (modem.bin and NON-HLOS.bin) and stored them here:&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.ericlight.com/files/G900IDVU1CPH3_modem_LTE.zip"&gt;https://www.ericlight.com/files/G900IDVU1CPH3_modem_LTE.zip&lt;/a&gt;&lt;br /&gt;
SHA256 hash = a2ab13063583f6e83a3c2d8b79521a59ba103dda30a24bddf9248dd5a25bff3c  &lt;/p&gt;
&lt;p&gt;I promise I haven't intentionally backdoored them, but I make no warranties of any sort.  They might just be pictures of my foot.&lt;/p&gt;
&lt;p&gt;Good luck!&lt;/p&gt;</summary><category term="Android"></category><category term="Security"></category></entry><entry><title>Tidying up Pelican's URLs with the Flex theme</title><link href="https://www.ericlight.com/articles/tidying-up-pelicans-urls-with-the-flex-theme.html" rel="alternate"></link><published>2016-10-23T00:00:00+13:00</published><updated>2016-10-23T00:00:00+13:00</updated><author><name>Eric Light</name></author><id>tag:www.ericlight.com,2016-10-23:articles/tidying-up-pelicans-urls-with-the-flex-theme.html</id><summary type="html">&lt;p&gt;This is just a brain-dump of tweaks I've made to my Pelican environment to get tidy URLs.  In summary:  One theme tweak, one Nginx tweak.&lt;/p&gt;
&lt;h2&gt;Making the Flex Theme drop the ugly url#slug format:&lt;/h2&gt;
&lt;p&gt;I've decided I'm going to roll with the &lt;a href="https://github.com/alexandrevicenzi/Flex"&gt;Flex&lt;/a&gt; theme for a while.  I like it, but it had this habit of putting anchors and slugs into my article URLs.&lt;/p&gt;
&lt;p&gt;For example, my first page is known to Pelican as "welcome-to-the-internet".  However, links to the page were automatically created as "welcome-to-the-internet#welcome-to-the-internet".  It seems redundant.  Also, it says the same thing twice.  It repeats itself.&lt;/p&gt;
&lt;p&gt;I discovered the issue in the Flex theme.  It's under /templates/index.html, circa lines 7 and 29.  Simply change:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;article.url&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;#&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;article.slug&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;... to... &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;article.slug&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Fixed!&lt;/p&gt;
&lt;p&gt;I haven't submitted a pull request to Alexandre, because I suspect it's intentional.&lt;/p&gt;
&lt;h2&gt;Getting Nginx to serve tidy urls:&lt;/h2&gt;
&lt;p&gt;By default, Pelican creates great urls like {server}/Ramblings/welcome-to-the-internet&lt;/p&gt;
&lt;p&gt;This is great, but it CREATES files like /var/www/Ramblings/welcome-to-the-internet.html&lt;/p&gt;
&lt;p&gt;Nginx by default doesn't see "welcome-to-the-internet" and automatically serve "welcome-to-the-internet.html".  The lack of a file extention means that the .html file is fundamentally &lt;em&gt;a different file&lt;/em&gt;, so it returns a handy-dandy 404 error instead.&lt;/p&gt;
&lt;p&gt;To fix this, open /etc/nginx/sites-available/yoursite, and find:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;location / &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    try_files &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;uri&lt;/span&gt;&lt;span class="x"&gt; &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;uri&lt;/span&gt;&lt;span class="x"&gt;/ =404;&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Change it to the following - note I've added $uri.htm and $uri.html, to inform Nginx that it should try appending .htm or .html onto the end of a uri if it can't find the page:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="x"&gt;location / &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;    try_files &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;htm&lt;/span&gt;&lt;span class="x"&gt; &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;uri&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nv"&gt;html&lt;/span&gt;&lt;span class="x"&gt; &lt;/span&gt;&lt;span class="p"&gt;$&lt;/span&gt;&lt;span class="nv"&gt;uri&lt;/span&gt;&lt;span class="x"&gt; =404;&lt;/span&gt;
&lt;span class="x"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;All done, happy tidy URLs!&lt;/p&gt;</summary><category term="Pelican"></category></entry></feed>